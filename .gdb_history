c
gdb
exit
b proc_wrapper.c:19
c
info registers eflags
n
info registers eflags
exit
b proc_wrapper:26
b proc_wrapper.c:26
c
info registers eflags
s
exit
b proc_wrapper.c:26
c
asm-prof
si
info registers eflags
si
src-prof
n
s
n
print *current_process 
s
n
print proc->fds[i]
print proc->fds[0]
print proc->fds[1]
print proc->fds[2]
n
s
print *pipe
n
print pipe->readers
exit
c
print *process_table[2]
print *process_table[3]
print *process_table[1]
print *process_table[0]
print process_table
=======
pro-prof
b phylo_main
c
b sys_read
n
print n_philosophers 
n
print philosophers[i].pipe_id
n
s
si
n
s
n
s
m
n
print proc->fds
n
print i
n
print free_fd 
n
n
si
n
print id
print argv
print *argv
print *argv[1]
print argv[1]
print argv[0]
print argv[2]
print argv[3]
print argv[1]
dashboard
s
print scheduler->current
print scheduler->current_process 
print *scheduler->current_process 
dashboard
n
print *scheduler->current_process 
print *scheduler->current_process->fds[3] 
print scheduler->current_process->fds[3] 
print scheduler->current_process->fds[3]->resource 
print *(char*)scheduler->current_process->fds[3]->resource 
dashboard
n
print *(char*)scheduler->current_process->fds[3]->resource 
print scheduler->current_process->fds[3] 
print scheduler->current_process->fds[3]->ops
print *scheduler->current_process->fds[3]->ops
print *scheduler->current_process->fds[3]->ops->write
print scheduler->current_process 
print *scheduler->current_process 
print *scheduler->current_process->fds
print *scheduler->current_process->fds[0]
print scheduler->current_process->fds[0]
print &scheduler->current_process->fds[0]
print dashboard
dashboard
print scheduler->current_process->fds[3]
print scheduler->current_process->fds[3]->resource 
print (pipe_t*)scheduler->current_process->fds[3]->resource 
print *(pipe_t*)scheduler->current_process->fds[3]->resource 
print *(pipe_t*)scheduler->current_process->fds[3]->resource->buffer 
print (pipe_t*)scheduler->current_process->fds[3]->resource->buffer 
print (struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer
print *(struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer
print *(char*)(struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer
print *(struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer
print *(struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer->buf
print *(char*)((struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer)->buf
print *(char*)((struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer)->buf+1
print *(char*)((struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer)->buf+2
print *(char*)((struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer)->(buf+1)
print *(char*)((struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer)->buf
dashboard
print *(char*)((struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer)->buf
n
n
print scheduler->current_process 
print *scheduler->current_process 
dashboard
n
s
n
print pipe->write_queue
print *pipe->write_queue
s
n
s
n
print ret_val
n
si
n
n
print philosophes[i].state
print philosophers[i].state
print philosophers[1].state
print philosophers[2].state
n
finish
n
finish
s
print rax
finish
si
n
finish
n
si
print philosophers[i].satte
print philosophers[i].satate
print philosophers[i].state
print philosophers[1].state
print philosophers[2].state
print philosophers[3].state
print philosophers[4].state
print philosophers[0].state
print n_philosophers 
n
d 2
dashboard
finish
finish
si
print philosophers[0].state
print philosophers[0]
print philosophers[1]
print philosophers[2]
print philosophers[3]
print philosophers[4]
n
n
print philosophers[0]
print philosophers[1]
print philosophers[2]
n
c
>>>>>>> d4ced7f2465cf517677e3e5250f7e46050f34378
exit
b proc_kill
c
print *scheduler->current_process 
n
print *process_table[3]
n
print *process_table[3]
print *process_table[3]->parent
n
print *process_table[3]->parent
exit
c
b sync_test_main 
c
exit
b sync_test_main 
c
n
exit
b sync_test_main 
c
n
print argv[0]
print argv[1]
exit
b test.c:72
b shell.c:46
c
b sync_test_main 
c
print argv[1]
n
n
print process_table 
print *process_table[4]
n
print TOTAL_PAIR_PROCESSES
until 78
print process_table 
exit
b sync_test_main 
c
n
l
l
until 80
print process_table
exit
b sync_test_main 
c
n
print fs_entr
print fs_entries
exit
b sync_test_main 
c
n
print fs_entries 
n
until 80
print process_table
print *process_table[5]
print *process_table[6]
print *process_table[4]
c
exit
