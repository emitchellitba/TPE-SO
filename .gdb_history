<<<<<<< HEAD
c
n
print *kbuff
x/10cb kbuff->buf
exit
b handle_ctrl_d
c
n
print *kbuff
n
print *kbuff
print *kbuff->buf
print kbuff->buf
x/10gb kbuff->buf
n
x/10gb kbuff->buf
exit
b tty.c:27
c
print buffer
print buffer[0]
n
c
delete
c
b handle_ctrl_c
c
n
print kbuff
print kbuff->buf
n
n
print kbuff->buf
exit
c
print *kbuff-buf
print *kbuff->buf
print kbuff->buf
b shell.c:192
c
exit
b shell.c:192
c
print input_buffer 
=======
>>>>>>> d4ced7f2465cf517677e3e5250f7e46050f34378
c
cc
c
c
c
c
b get_line
c
print buffer
print kbuff->buf
n
print buffer
n
a
s
b shell.c:103
c
print n
print input_buffer 
exit
b handle_key_press 
c
n
l
until 143
s
n
exit
b handle_key_press 
c
n
s
finish
s
print waiting_queue
print *waiting_queue
print *waiting_queue->head 
print *(struct proc *)waiting_queue->head 
print *(struct proc *)waiting_queue->head->value 
s
finish
n
s
n
asm-prof
si
exit
b handle_key_press 
c
l
l
until 174
n
print *scheduler->current_process 
exit
c
b *scheduler->current_process 
b *scheduler->current_process 
delete
print *scheduler->current_process 
exit
c
print *scheduler->current_process 
b handle_key_press 
c
b 81
c
print *scheduler->current_process 
n
print next_line_length
print next_line_length()
print kbuff
print kbuff->buf
print canonical_mode 
print ringbuf_available(kbuff)
print ringbuf_available(kbuff)
print kbuff->buf
print *kbuff
exit
b handle_key_press 
c
l
until 200
n
print kbuff
print *kbuff
n
print *kbuff
b get_line
b next_line_length
b read_line
b 81
c
print *scheduler->current_process 
n
print *kbuff
n
n
print ring
print *kbuff
exit
b get_line
c
print *kbuff
print *scheduler->current_process 
n
s
print ring
print *ring
n
print *ring
exit
<<<<<<< HEAD
b get_line
c
n
c
print *kbuff
n
s
n
n
l
l 70
l 72
l
print buf
print buf--
print buf-1
n
n
n
exit
b cat_main
c
print process_table
print *process_table[3]
print *process_table[4]
proc_kill
b proc_kill
c
c
n
n
exit
b proc_kill
c
n
exit
b proc_kill
c
info registers eflags
exit
b proc_kill 
c
info registers eflags
exit
b proc_kill
c
info registers eflags
n
info registers eflags
exit
b sys_exit
c
exit
b sys_exit
exit
c
gdb
exit
b proc_wrapper.c:19
c
info registers eflags
n
info registers eflags
exit
b proc_wrapper:26
b proc_wrapper.c:26
c
info registers eflags
s
exit
b proc_wrapper.c:26
c
asm-prof
si
info registers eflags
si
src-prof
n
s
n
print *current_process 
s
n
print proc->fds[i]
print proc->fds[0]
print proc->fds[1]
print proc->fds[2]
n
s
print *pipe
n
print pipe->readers
exit
c
print *process_table[2]
print *process_table[3]
print *process_table[1]
print *process_table[0]
print process_table
=======
pro-prof
b phylo_main
c
b sys_read
n
print n_philosophers 
n
print philosophers[i].pipe_id
n
s
si
n
s
n
s
m
n
print proc->fds
n
print i
n
print free_fd 
n
n
si
n
print id
print argv
print *argv
print *argv[1]
print argv[1]
print argv[0]
print argv[2]
print argv[3]
print argv[1]
dashboard
s
print scheduler->current
print scheduler->current_process 
print *scheduler->current_process 
dashboard
n
print *scheduler->current_process 
print *scheduler->current_process->fds[3] 
print scheduler->current_process->fds[3] 
print scheduler->current_process->fds[3]->resource 
print *(char*)scheduler->current_process->fds[3]->resource 
dashboard
n
print *(char*)scheduler->current_process->fds[3]->resource 
print scheduler->current_process->fds[3] 
print scheduler->current_process->fds[3]->ops
print *scheduler->current_process->fds[3]->ops
print *scheduler->current_process->fds[3]->ops->write
print scheduler->current_process 
print *scheduler->current_process 
print *scheduler->current_process->fds
print *scheduler->current_process->fds[0]
print scheduler->current_process->fds[0]
print &scheduler->current_process->fds[0]
print dashboard
dashboard
print scheduler->current_process->fds[3]
print scheduler->current_process->fds[3]->resource 
print (pipe_t*)scheduler->current_process->fds[3]->resource 
print *(pipe_t*)scheduler->current_process->fds[3]->resource 
print *(pipe_t*)scheduler->current_process->fds[3]->resource->buffer 
print (pipe_t*)scheduler->current_process->fds[3]->resource->buffer 
print (struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer
print *(struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer
print *(char*)(struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer
print *(struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer
print *(struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer->buf
print *(char*)((struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer)->buf
print *(char*)((struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer)->buf+1
print *(char*)((struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer)->buf+2
print *(char*)((struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer)->(buf+1)
print *(char*)((struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer)->buf
dashboard
print *(char*)((struct ringbuf*)((pipe_t*)scheduler->current_process->fds[3]->resource)->buffer)->buf
n
n
print scheduler->current_process 
print *scheduler->current_process 
dashboard
n
s
n
print pipe->write_queue
print *pipe->write_queue
s
n
s
n
print ret_val
n
si
n
n
print philosophes[i].state
print philosophers[i].state
print philosophers[1].state
print philosophers[2].state
n
finish
n
finish
s
print rax
finish
si
n
finish
n
si
print philosophers[i].satte
print philosophers[i].satate
print philosophers[i].state
print philosophers[1].state
print philosophers[2].state
print philosophers[3].state
print philosophers[4].state
print philosophers[0].state
print n_philosophers 
n
d 2
dashboard
finish
finish
si
print philosophers[0].state
print philosophers[0]
print philosophers[1]
print philosophers[2]
print philosophers[3]
print philosophers[4]
n
n
print philosophers[0]
print philosophers[1]
print philosophers[2]
n
c
>>>>>>> d4ced7f2465cf517677e3e5250f7e46050f34378
exit
